#
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The arg spec for the asa_og module
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type


class OGArgs(object):
    """The arg spec for the asa_og module
    """

    def __init__(self, **kwargs):
        pass

    argument_spec = {
        'config': {
            'elements': 'dict',
            'type': 'list',
            'options': {
                'name': {'required': True, 'type': 'str'},
                'object': {
                    'type': 'str',
                    'required': True,
                    'choices': ['icmp_type', 'network', 'protocol', 'security', 'service', 'user']
                },
                'description': {'type': 'str'},
                'icmp_object': {
                    'type': 'dict',
                    'options': {
                        'icmp_type': {
                            'type': 'list',
                            'choices': ['alternate-address', 'conversion-error', 'echo', 'echo-reply',
                                        'information-reply', 'information-request', 'mask-reply',
                                        'mask-request', 'mobile-redirect', 'parameter-problem',
                                        'redirect', 'router-advertisement', 'router-solicitation',
                                        'source-quench', 'time-exceeded', 'timestamp-reply',
                                        'timestamp-request', 'traceroute', 'unreachable']
                        }
                    }
                },
                'network_object': {
                    'elements': 'dict',
                    'type': 'list',
                    'options': {
                        'host': {'type': 'bool'},
                        'ip_address': {'type': 'str'},
                        'ip_mask': {'type': 'str'},
                        'ipv6_address': {'type': 'str'},
                        'object': {'type': 'str'}
                    }
                },
                'protocol_object': {
                    'type': 'dict',
                    'options': {
                        'protocol': {
                            'type': 'list',
                            'choices': ['ah', 'eigrp', 'esp', 'gre', 'icmp', 'icmp6', 'igmp', 'igrp',
                                        'ip', 'ipinip', 'ipsec', 'nos', 'ospf', 'pcp', 'pim', 'pptp',
                                        'sctp', 'snp', 'tcp', 'udp']
                        }
                    }
                },
                'security_group': {
                    'elements': 'dict',
                    'type': 'list',
                    'options': {
                        'name': {'type': 'str'},
                        'tag': {'type': 'int'}
                    }
                },
                'service_object': {
                    'type': 'dict',
                    'options': {
                        'protocol': {
                            'type': 'list',
                            'choices': ['ah', 'eigrp', 'esp', 'gre', 'icmp', 'icmp6', 'igmp', 'igrp',
                                        'ip', 'ipinip', 'ipsec', 'nos', 'ospf', 'pcp', 'pim', 'pptp',
                                        'sctp', 'snp', 'tcp', 'tcp-udp', 'udp']
                        },
                        'object': {'type': 'str'}
                    }
                },
                'user_group': {
                    'elements': 'dict',
                    'type': 'list',
                    'options': {
                        'name': {'type': 'str'}
                    }
                },
                'group_object': {'type': 'str'}
            }
        },
        'running_config': {'type': 'str'},
        'state': {
            'choices': ['merged', 'replaced', 'overridden', 'deleted', 'gathered', 'rendered', 'parsed'],
            'default': 'merged',
            'type': 'str'
        }
    }